#!/usr/bin/ruby
require 'yaml'

DEFAULT_EXCLUDE = ['.syncc', '.git', '.*.swp']
VERSION = '1.0'

if ARGV[0] =~ /^(-v|--version)$/
  stat = File.stat(__FILE__)
  puts "syncc #{VERSION} (installed #{stat.mtime.strftime('%Y-%m-%d')})"
  exit
end

parts = Dir.pwd.split('/')
subs = []
while not parts.empty?
  break if File.exists? File.join(*parts, '.syncc')
  subs.unshift parts.pop
end
path = '/' + parts.join('/')

begin
  conf = YAML.load_file(File.join(path, '.syncc'))
rescue Errno::ENOENT
  abort "** No .syncc file found in the directory tree."
end

abort "** No 'remotes' found in your .syncc file." unless
  conf['remotes'].to_a.length > 0

if ARGV.length != 1
  puts "Usage: syncc <alias>"
  puts "-- Your aliases: #{conf['remotes'].keys.join(', ')}"
else
  s = conf.merge(conf['remotes'][ARGV[0]])
  abort "** No remote named '#{ARGV[0]}' in your .syncc file" unless s
  s['user'] ||= ENV['SYNCC_USER']

  locals = (s['folder'] || "").split('/')
  while locals.length > 0 and subs.length > 0
    if locals.first == subs.first
      locals.shift
      subs.shift
    else
      abort "** The '#{s['folder']}' folder is not in the current directory tree."
    end
  end
  locals << "*"
  local= locals.join('/')
  subdir = subs.join('/')

  sync_path = File.join(s['path'], subdir)
  if s['host']
    sync_path = "#{s['host']}:#{sync_path}"
    if s['user']
      sync_path = "#{s['user']}@#{sync_path}"
    end
  end

  excludes = (s['exclude'].to_a + DEFAULT_EXCLUDE).
    map { |x| "--exclude=#{x}" }.join(" ")
  port = s['port'] ? "-p #{s['port']}" : ""
  local = s['folder'] ? "#{s['folder']}/*" : "*"

  if s['confirm']
    print "-- Type 'yes' to confirm syncc to '#{ARGV[0]}': "
    input = $stdin.gets.strip.downcase
    exit if input != 'yes'
  end

  cmd = "rsync -PSauve 'ssh #{port}' #{excludes} #{local} #{sync_path}"
  puts cmd
  exec cmd
end
